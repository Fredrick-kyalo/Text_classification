# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T4pKr7sBkB5Uz0tUEcStJAtCDkXiD00p
"""

!pip install gradio -q
!pip install sentence-transformers -q
!pip install nltk -q

import nltk
nltk.download('stopwords')
nltk.download('punkt')

import pandas as pd
from sentence_transformers import SentenceTransformer
from nltk.corpus import stopwords
stop = stopwords.words('english')

from sklearn.metrics.pairwise import cosine_similarity

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('titles.csv')
df.sample(10)

sample = df.sample(50)


sample.head()

#reset index

sample = sample.reset_index(drop=True)
sample.head()

# cleaning
sample['ctitle'] = sample['title'].str.replace('[^\w\s]','')
sample['ctitle'] = sample['ctitle'].str.replace('\d+', '')
sample['ctitle'] = sample['ctitle'].str.lower()

sample['ctitle'] = sample['ctitle'].apply(lambda item: " ".join(item for item in item.split() if item not in stop))
sample.head()

##Feature Extraction

model = SentenceTransformer('distilbert-base-nli-mean-tokens')

features = model.encode(sample['title'])
sample['features']= list(features)
sample.head()

print(sample['title'].iloc[0])
print(sample['features'].iloc[46].shape)
#print(sample['features'].iloc[0])

sample_query = sample.iloc[0]['title']
sample_query

query_feature = model.encode([sample_query])

sample['sim'] = sample ['features'].apply(lambda x:cosine_similarity([x], query_feature)[0][0])
sample.head()

sorted_sample = sample.sort_values(by='sim' , ascending =False)
sorted_sample.tail()

def return_sim(query):
   query_feature = model.encode([query])
   sample['sim'] = sample ['features'].apply(lambda x:cosine_similarity([x], query_feature)[0][0])
   sorted_sample = sample.sort_values(by='sim' , ascending =False)
   result=sorted_sample['title'].head(10)
   return list(result)

x = str(input('Enter a query'))
print(return_sim(x))

import gradio as gr

iface = gr.Interface(fn=return_sim, inputs = 'text',outputs='text' )
iface.launch(share=True)